name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  FIREPLACE_API_ASPNETCORE_ENVIRONMENT: Production
  FIREPLACE_API_LOG_DIRECTORY: /logs
  FIREPLACE_API_CONNECTION_STRING: ${{ secrets.FIREPLACE_API_CONNECTION_STRING }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --logger "console;verbosity=detailed"


  build:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x

    - name: Publish
      run: dotnet publish -c Release -o app

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
     
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: fireplaceapi/fireplace-api:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    env:
      SSH_PRIVATE_KEY_PATH: /home/runner/.ssh/private.key
      PROJECT_DIRECTORY: /bitiano/projects/fireplace/fireplace-api/

    steps:
    - uses: actions/checkout@v3
    
    - name: Create the private.key file
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_PRIVATE_KEY" > $SSH_PRIVATE_KEY_PATH
        chmod 600 $SSH_PRIVATE_KEY_PATH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create an SSH config for the server
      run: |
        cat >>~/.ssh/config <<END
        Host server
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile $SSH_PRIVATE_KEY_PATH
          StrictHostKeyChecking no
        END
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}

    - name: Login to DockerHub
      run: ssh server "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN"
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Transfer docker-compose.yml to the server
      run: |
        ssh server "mkdir -p $PROJECT_DIRECTORY"
        scp docker-compose.yml server:$PROJECT_DIRECTORY

    - name: Run the docker compose
      run: ssh server "
        cd $PROJECT_DIRECTORY;  
        ls -alh;
        echo 'Running docker compose...';
        export FIREPLACE_API_CONNECTION_STRING='$FIREPLACE_API_CONNECTION_STRING';
        docker compose down -t 2;
        docker compose pull;
        docker compose up -d;
        ls -alh;
        "

    - name: Logout from DockerHub
      run: ssh server "docker logout"
